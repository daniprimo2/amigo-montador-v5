#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üöÄ Iniciando build do AmigoMontador para Play Store...\n');

// Verificar se o ambiente est√° configurado
function checkEnvironment() {
    console.log('üìã Verificando ambiente...');
    
    try {
        // Verificar Java
        const javaVersion = execSync('java -version', { encoding: 'utf8', stderr: 'pipe' });
        console.log('‚úÖ Java instalado');
        
        // Verificar Gradle
        const gradleVersion = execSync('gradle --version', { encoding: 'utf8' });
        console.log('‚úÖ Gradle instalado');
        
        return true;
    } catch (error) {
        console.log('‚ùå Erro no ambiente:', error.message);
        console.log('\nüìù Instru√ß√µes de instala√ß√£o:');
        console.log('1. Instale Java JDK 11+: https://www.oracle.com/java/technologies/javase-jdk11-downloads.html');
        console.log('2. Instale Android Studio: https://developer.android.com/studio');
        console.log('3. Configure ANDROID_HOME e JAVA_HOME nas vari√°veis de ambiente');
        return false;
    }
}

// Configurar URL do app
function configureAppUrl() {
    console.log('\nüåê Configurando URL do aplicativo...');
    
    // Detectar URL do Replit automaticamente
    const replitUrl = process.env.REPL_SLUG ? 
        `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.replit.app` : 
        'https://amigomontador.replit.app';
    
    const mainActivityPath = './app/src/main/java/com/amigomontador/app/MainActivity.java';
    let content = fs.readFileSync(mainActivityPath, 'utf8');
    
    // Atualizar URL no c√≥digo
    content = content.replace(
        /private static final String APP_URL = ".*";/,
        `private static final String APP_URL = "${replitUrl}";`
    );
    
    fs.writeFileSync(mainActivityPath, content);
    console.log(`‚úÖ URL configurada: ${replitUrl}`);
}

// Criar keystore para assinatura
function createKeystore() {
    console.log('\nüîê Criando keystore de assinatura...');
    
    const keystorePath = './app/amigomontador-keystore.jks';
    
    if (fs.existsSync(keystorePath)) {
        console.log('‚úÖ Keystore j√° existe');
        return;
    }
    
    try {
        execSync(`keytool -genkey -v -keystore ${keystorePath} -alias amigomontador-key -keyalg RSA -keysize 2048 -validity 10000 -storepass amigomontador2025 -keypass amigomontador2025 -dname "CN=AmigoMontador, OU=Development, O=AmigoMontador, L=S√£o Paulo, ST=SP, C=BR"`, 
        { stdio: 'inherit' });
        
        console.log('‚úÖ Keystore criado com sucesso');
    } catch (error) {
        console.log('‚ùå Erro ao criar keystore:', error.message);
        throw error;
    }
}

// Criar √≠cones do aplicativo
function createAppIcons() {
    console.log('\nüé® Criando √≠cones do aplicativo...');
    
    // Criar √≠cone adaptativo XML
    const adaptiveIconXml = `<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
</adaptive-icon>`;

    // Criar background color
    const colorsXml = `<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#1a365d</color>
</resources>`;

    // Escrever arquivos
    const mipmapDirs = [
        './app/src/main/res/mipmap-hdpi',
        './app/src/main/res/mipmap-mdpi', 
        './app/src/main/res/mipmap-xhdpi',
        './app/src/main/res/mipmap-xxhdpi',
        './app/src/main/res/mipmap-xxxhdpi'
    ];

    mipmapDirs.forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        fs.writeFileSync(path.join(dir, 'ic_launcher.xml'), adaptiveIconXml);
        fs.writeFileSync(path.join(dir, 'ic_launcher_round.xml'), adaptiveIconXml);
    });

    // Adicionar cores ao values se n√£o existir
    const valuesDir = './app/src/main/res/values';
    const colorsPath = path.join(valuesDir, 'colors.xml');
    
    if (!fs.existsSync(colorsPath)) {
        fs.writeFileSync(colorsPath, colorsXml);
    }

    console.log('‚úÖ √çcones configurados');
}

// Limpar build anterior
function cleanBuild() {
    console.log('\nüßπ Limpando build anterior...');
    
    try {
        execSync('./gradlew clean', { stdio: 'inherit' });
        console.log('‚úÖ Build limpo');
    } catch (error) {
        console.log('‚ö†Ô∏è Erro ao limpar build (continuando...)');
    }
}

// Gerar arquivo AAB
function buildAAB() {
    console.log('\nüì¶ Gerando arquivo AAB...');
    
    try {
        execSync('./gradlew bundleRelease', { stdio: 'inherit' });
        
        const aabPath = './app/build/outputs/bundle/release/app-release.aab';
        
        if (fs.existsSync(aabPath)) {
            const stats = fs.statSync(aabPath);
            const sizeKB = (stats.size / 1024).toFixed(2);
            
            console.log(`\nüéâ AAB gerado com sucesso!`);
            console.log(`üìÅ Local: ${aabPath}`);
            console.log(`üìè Tamanho: ${sizeKB} KB`);
            
            // Copiar para diret√≥rio principal
            fs.copyFileSync(aabPath, './amigomontador-release.aab');
            console.log(`üìã Copiado para: ./amigomontador-release.aab`);
            
            return true;
        } else {
            throw new Error('Arquivo AAB n√£o foi gerado');
        }
    } catch (error) {
        console.log('‚ùå Erro ao gerar AAB:', error.message);
        throw error;
    }
}

// Validar arquivo AAB
function validateAAB() {
    console.log('\n‚úÖ Validando arquivo AAB...');
    
    const aabPath = './amigomontador-release.aab';
    
    if (!fs.existsSync(aabPath)) {
        throw new Error('Arquivo AAB n√£o encontrado');
    }
    
    const stats = fs.statSync(aabPath);
    
    if (stats.size < 1000) {
        throw new Error('Arquivo AAB muito pequeno - poss√≠vel erro');
    }
    
    console.log('‚úÖ Arquivo AAB v√°lido');
    
    // Informa√ß√µes finais
    console.log('\nüìã Informa√ß√µes do App:');
    console.log('‚Ä¢ Nome: AmigoMontador');
    console.log('‚Ä¢ Package: com.amigomontador.app');
    console.log('‚Ä¢ Vers√£o: 1.0 (c√≥digo: 1)');
    console.log('‚Ä¢ Compatibilidade: Android 5.1+ (API 22-34)');
    console.log(`‚Ä¢ Tamanho: ${(stats.size / 1024).toFixed(2)} KB`);
}

// Gerar documenta√ß√£o
function generateDocumentation() {
    console.log('\nüìö Gerando documenta√ß√£o...');
    
    const playStoreGuide = `# üöÄ Guia: Upload na Google Play Store

## Arquivo Gerado
- **Nome**: amigomontador-release.aab
- **Localiza√ß√£o**: ./amigomontador-release.aab
- **Tamanho**: ${fs.existsSync('./amigomontador-release.aab') ? (fs.statSync('./amigomontador-release.aab').size / 1024).toFixed(2) + ' KB' : 'N/A'}

## Informa√ß√µes do App
- **Nome**: AmigoMontador
- **Package**: com.amigomontador.app
- **Vers√£o**: 1.0 (c√≥digo: 1)
- **Compatibilidade**: Android 5.1+ (API 22-34)
- **URL**: ${process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.replit.app` : 'https://amigomontador.replit.app'}

## Passos para Upload na Play Store

### 1. Acesse o Google Play Console
- V√° para: https://play.google.com/console
- Fa√ßa login com sua conta Google

### 2. Crie um Novo App
- Clique em "Criar app"
- Nome: AmigoMontador
- Tipo: App
- Gratuito/Pago: Conforme sua escolha
- Declara√ß√µes obrigat√≥rias: Marque todas

### 3. Upload do AAB
- V√° para "Vers√µes do app" > "Produ√ß√£o"
- Clique em "Criar nova vers√£o"
- Fa√ßa upload do arquivo: amigomontador-release.aab
- Adicione notas da vers√£o

### 4. Preenchimento Obrigat√≥rio
- **Classifica√ß√£o do conte√∫do**: Complete o question√°rio
- **P√∫blico-alvo**: Defina faixa et√°ria
- **Privacidade**: Adicione pol√≠tica de privacidade
- **Categoriza√ß√£o**: Neg√≥cios/Produtividade

### 5. Store Listing
- **T√≠tulo**: AmigoMontador
- **Descri√ß√£o curta**: Conectando montadores e lojas
- **Descri√ß√£o completa**: 
  "Plataforma que conecta profissionais de lojas de m√≥veis com montadores qualificados. 
  Gerencie servi√ßos, comunique-se em tempo real e processe pagamentos com seguran√ßa."
- **√çcone**: Use o √≠cone gerado automaticamente
- **Capturas de tela**: Adicione pelo menos 3 screenshots

### 6. Revis√£o e Publica√ß√£o
- Revise todas as se√ß√µes
- Clique em "Enviar para revis√£o"
- Aguarde aprova√ß√£o (2-7 dias √∫teis)

## Atualiza√ß√µes Futuras
Para atualizar o app:
1. Modifique o c√≥digo do seu app web no Replit
2. As mudan√ßas aparecer√£o automaticamente no app
3. Para mudan√ßas na estrutura do app, gere nova vers√£o do AAB

## Suporte
- Email: [seu-email@exemplo.com]
- Documenta√ß√£o: Este arquivo
- Backup do keystore: Guardado com seguran√ßa
`;

    fs.writeFileSync('./GUIA_PLAY_STORE.md', playStoreGuide);
    console.log('‚úÖ Documenta√ß√£o criada: GUIA_PLAY_STORE.md');
}

// Fun√ß√£o principal
async function main() {
    try {
        if (!checkEnvironment()) {
            process.exit(1);
        }
        
        configureAppUrl();
        createKeystore();
        createAppIcons();
        cleanBuild();
        buildAAB();
        validateAAB();
        generateDocumentation();
        
        console.log('\nüéâ SUCESSO! App pronto para Play Store!');
        console.log('\nüìã Pr√≥ximos passos:');
        console.log('1. Acesse: https://play.google.com/console');
        console.log('2. Fa√ßa upload do arquivo: amigomontador-release.aab');
        console.log('3. Siga o guia: GUIA_PLAY_STORE.md');
        
    } catch (error) {
        console.log('\n‚ùå ERRO:', error.message);
        console.log('\nüìù Verifique:');
        console.log('‚Ä¢ Java JDK 11+ instalado');
        console.log('‚Ä¢ Android Studio instalado');
        console.log('‚Ä¢ Vari√°veis ANDROID_HOME e JAVA_HOME configuradas');
        process.exit(1);
    }
}

main();