#!/usr/bin/env node
import fs from 'fs';
import { execSync } from 'child_process';

console.log('Sistema de Verifica√ß√£o para Redeploy\n');

const issues = [];
const warnings = [];

// Verifica arquivos cr√≠ticos de build
const criticalFiles = [
  'dist/index.js',
  'dist/package.json',
  'dist/public/index.html'
];

criticalFiles.forEach(file => {
  if (!fs.existsSync(file)) {
    issues.push(`Arquivo cr√≠tico ausente: ${file}`);
  }
});

// Verifica configura√ß√£o do package.json de produ√ß√£o
if (fs.existsSync('dist/package.json')) {
  const pkg = JSON.parse(fs.readFileSync('dist/package.json', 'utf8'));
  
  if (pkg.main !== 'index.js') {
    issues.push('Entry point incorreto no package.json de produ√ß√£o');
  }
  
  if (!pkg.scripts?.start?.includes('node index.js')) {
    issues.push('Script de start incorreto');
  }
  
  const requiredDeps = ['express', 'drizzle-orm', '@neondatabase/serverless'];
  requiredDeps.forEach(dep => {
    if (!pkg.dependencies?.[dep]) {
      issues.push(`Depend√™ncia cr√≠tica ausente: ${dep}`);
    }
  });
}

// Verifica configura√ß√£o do servidor
if (fs.existsSync('dist/index.js')) {
  const serverCode = fs.readFileSync('dist/index.js', 'utf8');
  
  if (!serverCode.includes('0.0.0.0')) {
    issues.push('Servidor n√£o configurado para bind 0.0.0.0');
  }
  
  if (!serverCode.includes('process.env.PORT')) {
    issues.push('Vari√°vel PORT n√£o configurada');
  }
}

// Verifica vari√°veis de ambiente necess√°rias
const envVars = ['DATABASE_URL'];
envVars.forEach(envVar => {
  if (!process.env[envVar]) {
    warnings.push(`Vari√°vel de ambiente ${envVar} n√£o definida`);
  }
});

// Verifica diret√≥rios de assets
const assetDirs = ['uploads', 'attached_assets'];
assetDirs.forEach(dir => {
  if (fs.existsSync(dir) && !fs.existsSync(`dist/${dir}`)) {
    warnings.push(`Diret√≥rio ${dir} n√£o copiado para produ√ß√£o`);
  }
});

// Testa compila√ß√£o fresh
console.log('Testando build limpo...');
try {
  if (fs.existsSync('dist')) {
    fs.rmSync('dist', { recursive: true });
  }
  execSync('npm run build', { stdio: 'pipe' });
  console.log('‚úì Build limpo executado com sucesso');
} catch (error) {
  issues.push('Falha no build limpo');
}

// Testa start do servidor de produ√ß√£o
console.log('Testando servidor de produ√ß√£o...');
try {
  const result = execSync('cd dist && PORT=9999 timeout 3 node index.js', { 
    stdio: 'pipe',
    encoding: 'utf8'
  });
  console.log('‚úì Servidor de produ√ß√£o inicia corretamente');
} catch (error) {
  const output = error.stdout || error.stderr || '';
  if (output.includes('serving on port') || output.includes('Database connection')) {
    console.log('‚úì Servidor de produ√ß√£o inicia corretamente');
  } else if (output.includes('EADDRINUSE')) {
    console.log('‚úì Servidor funcional (porta em uso √© esperado)');
  } else {
    console.log('Verificando output do servidor...');
    console.log('Output:', output.slice(0, 200));
    issues.push('Falha ao iniciar servidor de produ√ß√£o');
  }
}

// Relat√≥rio final
console.log('\n=== RELAT√ìRIO DE REDEPLOY ===');

if (issues.length === 0) {
  console.log('‚úì SISTEMA PRONTO PARA REDEPLOY');
  console.log('\nTodos os requisitos cr√≠ticos atendidos:');
  console.log('- Build de produ√ß√£o funcional');
  console.log('- Servidor configurado corretamente');
  console.log('- Depend√™ncias inclu√≠das');
  console.log('- Entry point correto (dist/index.js)');
  console.log('- Bind para 0.0.0.0 e PORT configurados');
  
  if (warnings.length > 0) {
    console.log('\nAvisos (n√£o cr√≠ticos):');
    warnings.forEach(warning => console.log(`! ${warning}`));
  }
  
  console.log('\nüöÄ O redeploy pode ser executado com seguran√ßa');
  process.exit(0);
} else {
  console.log('‚ùå PROBLEMAS ENCONTRADOS');
  console.log('\nProblemas cr√≠ticos que impedem o redeploy:');
  issues.forEach(issue => console.log(`‚úó ${issue}`));
  
  if (warnings.length > 0) {
    console.log('\nAvisos adicionais:');
    warnings.forEach(warning => console.log(`! ${warning}`));
  }
  
  console.log('\nResolva os problemas cr√≠ticos antes do redeploy');
  process.exit(1);
}