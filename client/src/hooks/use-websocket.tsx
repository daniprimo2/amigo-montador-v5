import { useState, useEffect, useCallback, useRef } from 'react';
import { useAuth } from './use-auth';
import { useToast } from './use-toast';
import { queryClient } from '@/lib/queryClient';

// Fun√ß√£o global de debug para maior visibilidade nos logs
const debugLogger = (context: string, message: string, data?: any) => {
  const timestamp = new Date().toISOString();
  };

type WebSocketMessage = {
  type: 'connection' | 'new_application' | 'new_message' | 'application_accepted' | 'service_completed' | 'automatic_notification' | 'service_confirmed' | 'payment_ready' | 'payment_confirmed' | 'evaluation_required' | 'service_started_with_other' | 'ping' | 'pong';
  message?: string;
  serviceId?: number;
  serviceTitle?: string;
  timestamp?: string;
  serviceData?: any; // Para carregar informa√ß√µes do servi√ßo quando necess√°rio
  amount?: string; // Para notifica√ß√µes de pagamento
  userId?: number; // Para identificar o usu√°rio alvo da mensagem
  data?: any; // Para dados adicionais da notifica√ß√£o
  evaluateUser?: {
    id: number;
    name: string;
    type: 'lojista' | 'montador';
  };
};

// Fun√ß√£o para tocar som de notifica√ß√£o
const playNotificationSound = (type: 'message' | 'application' | 'default' = 'default') => {
  try {
    // Podemos usar o mesmo som para todos os tipos por enquanto, mas a fun√ß√£o est√° preparada para sons diferentes
    const audio = new Audio('/notification.mp3');
    
    // Ajustar volume baseado no tipo de notifica√ß√£o
    switch (type) {
      case 'message':
        audio.volume = 0.7; // Volume mais alto para mensagens
        break;
      case 'application':
        audio.volume = 0.6; // Volume m√©dio para candidaturas
        break;
      default:
        audio.volume = 0.5; // Volume padr√£o para outras notifica√ß√µes
    }
    
    audio.play().catch(error => {
      // Alguns navegadores bloqueiam a reprodu√ß√£o autom√°tica
      });
  } catch (error) {
    console.error('Erro ao criar objeto de √°udio:', error);
  }
};

// Fun√ß√£o para enviar notifica√ß√£o do navegador √∫nica por usu√°rio
const sendBrowserNotification = (title: string, body: string, icon: string = '/logo.png', userId?: number) => {
  // Verificar se o navegador suporta notifica√ß√µes
  if (!("Notification" in window)) {
    return;
  }
  
  // Verificar a permiss√£o
  if (Notification.permission === "granted") {
    // Criar notifica√ß√£o com tag √∫nica por usu√°rio para evitar duplicatas
    const notificationTag = `amigomontador-user-${userId || 'unknown'}-${Date.now()}`;
    new Notification(title, { 
      body, 
      icon, 
      tag: notificationTag,
      requireInteraction: false,
      silent: false
    });
  } else if (Notification.permission !== "denied") {
    // Caso contr√°rio, pedir permiss√£o
    Notification.requestPermission().then(permission => {
      if (permission === "granted") {
        const notificationTag = `amigomontador-user-${userId || 'unknown'}-${Date.now()}`;
        new Notification(title, { 
          body, 
          icon, 
          tag: notificationTag,
          requireInteraction: false,
          silent: false
        });
      }
    });
  }
};

export function useWebSocket() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [connected, setConnected] = useState(false);
  const socketRef = useRef<WebSocket | null>(null);
  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);

  // Fun√ß√£o para conectar ao WebSocket
  const connect = useCallback(() => {
    if (!user) {
      debugLogger('WebSocket', 'Usu√°rio n√£o autenticado - n√£o iniciando conex√£o WebSocket');
      setConnected(false);
      return;
    }

    // Fechar conex√£o anterior se existir
    if (socketRef.current) {
      debugLogger('WebSocket', 'Fechando conex√£o WebSocket existente');
      socketRef.current.close();
    }

    try {
      // Criar nova conex√£o
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/ws?userId=${user.id}`;
      
      debugLogger('WebSocket', `Iniciando conex√£o para usu√°rio ${user.id}`, { url: wsUrl });
      
      const socket = new WebSocket(wsUrl);
      socketRef.current = socket;

      socket.onopen = () => {
        debugLogger('WebSocket', 'Conex√£o estabelecida com sucesso');
        setConnected(true);
        
        // Enviar mensagem de autentica√ß√£o para associar o WebSocket ao usu√°rio
        const authMessage = {
          type: 'auth',
          userId: user.id,
          userType: user.userType
        };
        socket.send(JSON.stringify(authMessage));
        debugLogger('WebSocket', 'Mensagem de autentica√ß√£o enviada', authMessage);
        
        // Configurar heartbeat para manter conex√£o viva
        const heartbeatInterval = setInterval(() => {
          if (socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ type: 'ping' }));
          } else {
            clearInterval(heartbeatInterval);
          }
        }, 30000); // Ping a cada 30 segundos
        
        // Armazenar refer√™ncia do intervalo para limpeza
        (socket as any).heartbeatInterval = heartbeatInterval;
      };

      socket.onclose = (event) => {
        debugLogger('WebSocket', `Conex√£o fechada: C√≥digo ${event.code}, Motivo: ${event.reason || 'N√£o especificado'}`);
        setConnected(false);
        
        // Limpar heartbeat se existir
        if ((socket as any).heartbeatInterval) {
          clearInterval((socket as any).heartbeatInterval);
        }
        
        // Tentar reconectar ap√≥s 2 segundos apenas se o componente ainda estiver montado
        // e se n√£o foi um fechamento intencional (c√≥digo 1000)
        if (user && event.code !== 1000) {
          debugLogger('WebSocket', 'Agendando reconex√£o em 2 segundos');
          setTimeout(() => {
            if (user) { // Verificar novamente se o usu√°rio ainda est√° logado
              debugLogger('WebSocket', 'Tentando reconex√£o autom√°tica');
              connect();
            }
          }, 2000);
        }
      };

      socket.onerror = (error) => {
        debugLogger('WebSocket', 'Erro na conex√£o WebSocket', error);
        setConnected(false);
      };

      socket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data) as WebSocketMessage;
          debugLogger('WebSocket', `Mensagem recebida: ${data.type}`, data);
          
          // Verificar se a mensagem √© destinada a este usu√°rio
          if (data.userId && data.userId !== user.id) {
            debugLogger('WebSocket', `Mensagem n√£o destinada a este usu√°rio (${user.id}), ignorando mensagem para usu√°rio ${data.userId}`);
            return;
          }
          
          // Log para debug se a mensagem n√£o tem userId (pode indicar problema)
          if (!data.userId && data.type !== 'ping' && data.type !== 'pong') {
            debugLogger('WebSocket', `‚ö†Ô∏è Mensagem recebida sem userId - tipo: ${data.type}`, data);
          }
          
          // Log espec√≠fico para mensagens que passaram pela valida√ß√£o
          if (data.userId === user.id && data.type !== 'ping' && data.type !== 'pong') {
            debugLogger('WebSocket', `‚úÖ Processando notifica√ß√£o para usu√°rio ${user.id} - tipo: ${data.type}`, data);
          }
          
          // Atualizar √∫ltimo estado da mensagem e enviar evento de notifica√ß√£o
          setLastMessage(data);
          
          // Disparar evento global para qualquer componente que precise reagir a novas mensagens
          const notificationEvent = new CustomEvent('new-notification', { 
            detail: { type: data.type, data } 
          });
          window.dispatchEvent(notificationEvent);
          
          // Ignorar mensagens de heartbeat
          if (data.type === 'ping' || data.type === 'pong') {
            return;
          }
          
          // Processar diferentes tipos de mensagem
          if (data.type === 'new_application') {
            playNotificationSound('application');
            sendBrowserNotification('üîî Nova candidatura', data.message || 'Um montador se candidatou ao seu servi√ßo', '/logo.png', user.id);
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            queryClient.invalidateQueries({ queryKey: ['/api/store/services/with-applications'] });
            
            toast({
              title: 'üîî Nova candidatura',
              description: data.message,
              duration: 8000,
              variant: 'default',
              className: 'bg-blue-100 border-blue-500 border-2 animate-pulse-once shadow-lg'
            });
          } else if (data.type === 'new_message') {
            playNotificationSound('message');
            sendBrowserNotification('üí¨ Nova mensagem recebida!', data.message || 'Voc√™ recebeu uma nova mensagem. Clique para visualizar.', '/logo.png', user.id);
            
            if (data.serviceId) {
              queryClient.invalidateQueries({ queryKey: [`/api/services/${data.serviceId}/messages`] });
              queryClient.invalidateQueries({ queryKey: ['/api/services'] });
              queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
            }
            
            toast({
              title: 'üí¨ Nova mensagem recebida!',
              description: data.message,
              duration: 8000,
              variant: 'default',
              className: 'bg-green-100 border-green-500 border-2 font-medium shadow-lg animate-pulse-once'
            });
            
            if ('vibrate' in navigator) {
              navigator.vibrate([200, 100, 200]);
            }
          } else if (data.type === 'application_accepted') {
            playNotificationSound('application');
            sendBrowserNotification('‚úÖ Candidatura aceita!', data.message || 'Uma loja aceitou sua candidatura para um servi√ßo', '/logo.png', user.id);
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            
            toast({
              title: '‚úÖ Candidatura aceita!',
              description: data.message,
              duration: 8000,
              variant: 'default',
              className: 'bg-green-100 border-green-500 border-2 font-medium shadow-lg animate-pulse-once'
            });
            
            if ('vibrate' in navigator) {
              navigator.vibrate([100, 50, 100, 50, 100]);
            }
          } else if (data.type === 'service_completed') {
            playNotificationSound();
            sendBrowserNotification('üåü Servi√ßo finalizado!', 'Por favor, avalie sua experi√™ncia com este servi√ßo.', '/logo.png', user.id);
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            
            if (data.serviceId && data.serviceData) {
              const ratingEvent = new CustomEvent('open-rating-dialog', { 
                detail: { 
                  serviceId: data.serviceId,
                  serviceData: data.serviceData
                } 
              });
              window.dispatchEvent(ratingEvent);
            }
            
            toast({
              title: 'üåü Servi√ßo finalizado!',
              description: 'Por favor, avalie sua experi√™ncia.',
              duration: 10000,
              variant: 'default',
              className: 'bg-yellow-100 border-yellow-500 border-2 font-medium shadow-lg animate-pulse-once'
            });
          } else if (data.type === 'service_started_with_other') {
            playNotificationSound();
            sendBrowserNotification('üìã Servi√ßo iniciado', data.message || 'Um servi√ßo foi iniciado com outro montador', '/logo.png', user.id);
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            queryClient.invalidateQueries({ queryKey: ['/api/services/available'] });
            
            toast({
              title: 'üìã Servi√ßo iniciado',
              description: data.message,
              duration: 8000,
              variant: 'default',
              className: 'bg-orange-100 border-orange-500 border-2 font-medium shadow-lg animate-pulse-once'
            });
            
            if ('vibrate' in navigator) {
              navigator.vibrate([100, 50, 100]);
            }
          } else if (data.type === 'evaluation_required') {
            // Notifica√ß√£o de avalia√ß√£o obrigat√≥ria
            playNotificationSound();
            sendBrowserNotification('‚≠ê Avalia√ß√£o obrigat√≥ria', data.message || '√â necess√°rio avaliar o servi√ßo para finaliz√°-lo', '/logo.png', user.id);
            
            // Invalidar queries para atualizar listas
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            queryClient.invalidateQueries({ queryKey: ['/api/services/pending-evaluations'] });
            
            // Disparar evento personalizado para abrir o di√°logo de avalia√ß√£o imediatamente
            const evaluationEvent = new CustomEvent('mandatory-evaluation-required', { 
              detail: { 
                serviceId: data.serviceId,
                serviceData: data.serviceData,
                userId: data.userId,
                evaluateUser: data.evaluateUser
              } 
            });
            window.dispatchEvent(evaluationEvent);
            
            toast({
              title: '‚≠ê Avalia√ß√£o obrigat√≥ria',
              description: data.message || '√â necess√°rio avaliar o servi√ßo para finaliz√°-lo',
              duration: 10000,
              variant: 'default',
              className: 'bg-purple-100 border-purple-500 border-2 font-medium shadow-lg animate-pulse-once'
            });
            
            if ('vibrate' in navigator) {
              navigator.vibrate([200, 100, 200, 100, 200]);
            }
          }
        } catch (error) {
          debugLogger('WebSocket', 'Erro ao processar mensagem', error);
        }
      };
      
    } catch (error) {
      debugLogger('WebSocket', 'Erro ao criar conex√£o WebSocket', error);
      setConnected(false);
      return;
    }
  }, [user, toast]);

  // Conectar ao WebSocket quando o usu√°rio estiver dispon√≠vel
  useEffect(() => {
    if (user) {
      connect();
    }
    
    // Limpar ao desmontar
    return () => {
      if (socketRef.current) {
        socketRef.current.close();
      }
    };
  }, [user, connect]);

  return {
    connected,
    lastMessage
  };
}