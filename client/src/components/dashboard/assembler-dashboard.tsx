import React, { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { MapPin, Search, SlidersHorizontal, MessageSquare, Wifi, Star, CheckCheck, ChevronRight, User, ChevronDown } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import AvailableServiceCard from './available-service-card';
import CompletedServiceCard from './completed-service-card';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import { useWebSocket } from '@/hooks/use-websocket';
import { ChatInterface } from '@/components/chat/chat-interface';
import { RatingDialog } from '@/components/rating/rating-dialog';
import { ProfileDialog } from './profile-dialog';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';

interface AssemblerDashboardProps {
  onLogout: () => void;
}

// Define the service interface to match what's returned from the API
interface ServiceData {
  id: number;
  title: string;
  description: string;
  location: string;
  date: string;
  price: string; // price √© uma string no banco de dados
  type?: string;
  materialType?: string;
  storeId: number;
  store?: {
    name: string;
  };
  status: string;
  createdAt: string;
  completedAt?: string; // Data de finaliza√ß√£o do servi√ßo
}

// Format data for display in the UI
const formatServiceForDisplay = (service: ServiceData & { startDate?: string; endDate?: string; projectFiles?: any }) => {
  return {
    id: service.id,
    title: service.title,
    location: service.location,
    distance: '5 km', // This would be calculated based on user location
    date: service.date || 'Data n√£o informada', // Manter o formato original do backend
    startDate: service.startDate || null, // Incluir startDate do backend
    endDate: service.endDate || null, // Incluir endDate do backend
    price: `R$ ${parseFloat(service.price).toFixed(2).replace('.', ',')}`,
    store: service.store || 'Loja n√£o especificada',
    type: service.materialType || service.type || 'N√£o especificado', // Garantir que nunca seja undefined
    status: service.status, // Passar o status do servi√ßo para o componente
    projectFiles: service.projectFiles || [], // Incluir os arquivos do projeto
    description: service.description // Incluir a descri√ß√£o se houver
  };
};

// Extrair as datas dos servi√ßos para marca√ß√£o no calend√°rio
const getServiceDates = (services?: ServiceData[]) => {
  if (!services) return [];
  
  const dates: string[] = [];
  
  services.forEach(service => {
    try {
      // Tenta extrair o dia da data do servi√ßo
      const dateString = service.date;
      
      // Verifica se cont√©m um intervalo (formato "2025-05-15 - 2025-05-30")
      if (dateString.includes(' - ')) {
        const [startDate] = dateString.split(' - ');
        const day = new Date(startDate).getDate().toString();
        if (!dates.includes(day)) {
          dates.push(day);
        }
      } else {
        // Formato data normal
        const day = new Date(dateString).getDate().toString();
        if (!isNaN(Number(day)) && !dates.includes(day)) {
          dates.push(day);
        }
      }
    } catch (e) {
      console.error('Erro ao processar data:', service.date);
    }
  });
  
  return dates;
};

// Obter o m√™s atual em portugu√™s
const getCurrentMonth = () => {
  const months = [
    'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
  ];
  return months[new Date().getMonth()];
};

// Obter o ano atual
const getCurrentYear = () => {
  return new Date().getFullYear().toString();
};

// Importar o di√°logo de confirma√ß√£o
import { ServiceConfirmDialog } from '@/components/payment/service-confirm-dialog';
import { PaymentDialog } from '@/components/payment/payment-dialog';

export const AssemblerDashboard: React.FC<AssemblerDashboardProps> = ({ onLogout }) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCity, setSelectedCity] = useState('Todas as cidades');
  const [isCityDropdownOpen, setIsCityDropdownOpen] = useState(false);
  const [dashboardSection, setDashboardSection] = useState<'home' | 'explore' | 'chat'>('home');
  const [activeTab, setActiveTab] = useState<'available' | 'in-progress' | 'completed'>('available');
  const [isRatingDialogOpen, setIsRatingDialogOpen] = useState(false);
  const [isProfileDialogOpen, setIsProfileDialogOpen] = useState(false);
  const [isConfirmDialogOpen, setIsConfirmDialogOpen] = useState(false);
  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);
  const [selectedServiceForRating, setSelectedServiceForRating] = useState<any>(null);
  const [selectedServiceForConfirm, setSelectedServiceForConfirm] = useState<any>(null);
  const [selectedServiceForPayment, setSelectedServiceForPayment] = useState<any>(null);
  const { connected, lastMessage } = useWebSocket();

  // Lista de cidades brasileiras principais para filtro
  const brazilianCities = [
    'Todas as cidades',
    'S√£o Paulo, SP',
    'Rio de Janeiro, RJ',
    'Bras√≠lia, DF',
    'Salvador, BA',
    'Fortaleza, CE',
    'Belo Horizonte, MG',
    'Manaus, AM',
    'Curitiba, PR',
    'Recife, PE',
    'Goi√¢nia, GO',
    'Bel√©m, PA',
    'Porto Alegre, RS',
    'Guarulhos, SP',
    'Campinas, SP',
    'S√£o Lu√≠s, MA',
    'S√£o Gon√ßalo, RJ',
    'Macei√≥, AL',
    'Duque de Caxias, RJ',
    'Natal, RN',
    'Teresina, PI',
    'Campo Grande, MS',
    'Nova Igua√ßu, RJ',
    'S√£o Bernardo do Campo, SP',
    'Jo√£o Pessoa, PB',
    'Santo Andr√©, SP',
    'Osasco, SP',
    'Jaboat√£o dos Guararapes, PE',
    'S√£o Jos√© dos Campos, SP',
    'Ribeir√£o Preto, SP',
    'Uberl√¢ndia, MG',
    'Sorocaba, SP',
    'Contagem, MG',
    'Aracaju, SE',
    'Feira de Santana, BA',
    'Cuiab√°, MT',
    'Joinville, SC',
    'Juiz de Fora, MG',
    'Londrina, PR',
    'Aparecida de Goi√¢nia, GO',
    'Niter√≥i, RJ',
    'Ananindeua, PA',
    'Belford Roxo, RJ',
    'Caxias do Sul, RS',
    'Campos dos Goytacazes, RJ',
    'S√£o Jo√£o de Meriti, RJ',
    'Vila Velha, ES',
    'Florian√≥polis, SC',
    'Santos, SP',
    'Carapicu√≠ba, SP'
  ];
  
  // Reagir a mensagens de WebSocket
  useEffect(() => {
    if (!lastMessage) return;
    
    if (lastMessage.type === 'application_accepted') {
      // Isso muda automaticamente para a se√ß√£o de chat
      setDashboardSection('chat');
      
      console.log("[AssemblerDashboard] Candidatura aceita! Atualizando interface...");
      
      // Invalidar queries manualmente para garantir atualiza√ß√£o
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
    } 
    // Quando receber notifica√ß√£o autom√°tica de servi√ßo pelo lojista
    else if (lastMessage.type === 'automatic_notification') {
      console.log("[AssemblerDashboard] Notifica√ß√£o autom√°tica recebida do lojista", lastMessage);
      
      // Atualizar todas as listas de servi√ßos
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
      queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
      
      // Se houver dados do servi√ßo, abrir di√°logo de confirma√ß√£o
      if (lastMessage.serviceId && lastMessage.serviceData) {
        const service = lastMessage.serviceData;
        
        // Configurar dados para confirma√ß√£o do servi√ßo pelo montador
        setSelectedServiceForConfirm({
          id: service.id,
          title: service.title,
          price: service.price || 'Valor n√£o definido'
        });
        
        // For√ßar a abertura do di√°logo de confirma√ß√£o
        setIsConfirmDialogOpen(true);
        
        // Vibrar no celular se API estiver dispon√≠vel
        if ('vibrate' in navigator) {
          navigator.vibrate([300, 100, 300]);
        }
        
        // Mudar para a se√ß√£o inicial para contexto
        setDashboardSection('home');
        
        // Notificar o montador sobre a necessidade de confirmar
        toast({
          title: 'üîî Notifica√ß√£o autom√°tica',
          description: 'O lojista enviou uma notifica√ß√£o de servi√ßo. Por favor, confirme para prosseguir.',
          duration: 10000,
          variant: 'default',
          className: 'bg-orange-100 border-orange-500 border-2 font-medium shadow-lg animate-pulse'
        });
      }
    }
    // Quando receber notifica√ß√£o de pagamento dispon√≠vel ap√≥s confirma√ß√£o
    else if (lastMessage.type === 'payment_ready') {
      console.log("[AssemblerDashboard] Notifica√ß√£o de pagamento dispon√≠vel recebida", lastMessage);
      
      // Atualizar todas as listas de servi√ßos
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
      
      // Se houver dados do servi√ßo, abrir di√°logo de pagamento
      if (lastMessage.serviceId && lastMessage.serviceData) {
        const service = lastMessage.serviceData;
        
        // Configurar dados para pagamento do servi√ßo pelo montador
        setSelectedServiceForPayment({
          id: service.id,
          title: service.title,
          amount: service.price || '0.00'
        });
        
        // For√ßar a abertura do di√°logo de pagamento
        setIsPaymentDialogOpen(true);
        
        // Vibrar no celular se API estiver dispon√≠vel (padr√£o mais longo para pagamento)
        if ('vibrate' in navigator) {
          navigator.vibrate([200, 100, 200, 100, 400]);
        }
        
        // Mudar para a se√ß√£o inicial para contexto
        setDashboardSection('home');
        
        // Notificar o montador sobre disponibilidade de pagamento
        toast({
          title: 'üí≥ Pagamento Dispon√≠vel',
          description: 'O servi√ßo foi confirmado. Voc√™ j√° pode fazer o pagamento.',
          duration: 10000,
          variant: 'default',
          className: 'bg-blue-100 border-blue-500 border-2 font-medium shadow-lg animate-pulse'
        });
      }
    }
    // Quando o servi√ßo j√° foi confirmado pelo montador e est√° pronto para pagamento
    else if (lastMessage.type === 'payment_ready') {
      console.log("[AssemblerDashboard] Servi√ßo confirmado e pronto para pagamento", lastMessage);
      
      // Atualizar todas as listas de servi√ßos
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
      queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
      
      // Se houver dados do servi√ßo, abrir di√°logo de pagamento
      if (lastMessage.serviceId && lastMessage.serviceData) {
        const service = lastMessage.serviceData;
        
        // Configurar dados para pagamento
        setSelectedServiceForPayment({
          id: service.id,
          title: service.title,
          amount: service.price || 'Valor n√£o definido'
        });
        
        // For√ßar a abertura do di√°logo de pagamento
        setIsPaymentDialogOpen(true);
        
        // Notificar o montador sobre a necessidade de pagamento
        toast({
          title: 'üí∞ Pagamento pendente',
          description: 'O servi√ßo foi confirmado e agora est√° pronto para pagamento.',
          duration: 8000,
          className: 'bg-green-100 border-green-500 border-2 font-medium shadow-lg'
        });
      }
    }
    else if (lastMessage.type === 'service_completed') {
      console.log("[AssemblerDashboard] Servi√ßo finalizado, abrindo tela de avalia√ß√£o", lastMessage);
      
      // Atualizar todas as listas de servi√ßos
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
      queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
      
      // Se houver dados do servi√ßo, abrir di√°logo de avalia√ß√£o
      if (lastMessage.serviceId && lastMessage.serviceData) {
        const service = lastMessage.serviceData;
        const storeData = service.storeData;
        
        if (storeData) {
          // Configurar dados para avalia√ß√£o da loja pelo montador
          setSelectedServiceForRating({
            id: service.id,
            title: service.title,
            store: {
              id: storeData.id,
              userId: storeData.userId,
              name: storeData.name
            }
          });
          
          // Bloquear o restante da interface at√© que a avalia√ß√£o seja conclu√≠da
          // For√ßar a abertura do di√°logo de avalia√ß√£o
          setIsRatingDialogOpen(true);
          
          // Mudar para a se√ß√£o inicial e mostrar servi√ßos conclu√≠dos para contexto
          setDashboardSection('home');
          
          toast({
            title: 'üåü Servi√ßo finalizado!',
            description: '√â necess√°rio avaliar o servi√ßo antes de continuar.',
            duration: 10000,
            variant: 'destructive',
            className: 'bg-yellow-100 border-yellow-500 border-2 font-medium shadow-lg'
          });
        }
      }
    }
  }, [lastMessage, queryClient, toast]);
  
  // Escuta os eventos de mudan√ßa de aba do layout
  useEffect(() => {
    const handleTabChange = (event: CustomEvent) => {
      const { tab } = event.detail;
      setDashboardSection(tab);
    };
    
    // Listener para evento de abrir avalia√ß√£o
    const handleOpenRatingDialog = (event: CustomEvent) => {
      const { serviceId, serviceData } = event.detail;
      
      if (serviceData && serviceData.storeData) {
        // Configurar dados para avalia√ß√£o da loja pelo montador
        setSelectedServiceForRating({
          id: serviceData.id,
          title: serviceData.title,
          store: {
            id: serviceData.storeData.id,
            userId: serviceData.storeData.userId,
            name: serviceData.storeData.name
          }
        });
        
        // Abrir di√°logo de avalia√ß√£o automaticamente
        setIsRatingDialogOpen(true);
        
        // Mudar para a se√ß√£o de servi√ßos conclu√≠dos
        setDashboardSection('home');
      }
    };
    
    // Adiciona os listeners para os eventos personalizados
    window.addEventListener('dashboard-tab-change', handleTabChange as EventListener);
    window.addEventListener('open-rating-dialog', handleOpenRatingDialog as EventListener);
    
    // Remove os listeners quando o componente for desmontado
    return () => {
      window.removeEventListener('dashboard-tab-change', handleTabChange as EventListener);
      window.removeEventListener('open-rating-dialog', handleOpenRatingDialog as EventListener);
    };
  }, []);
  
  // Fetch available services
  const { data: services, isLoading, error } = useQuery({
    queryKey: ['/api/services'],
    select: (data: ServiceData[]) => data.map(formatServiceForDisplay),
    staleTime: 0, // Force fresh data
    cacheTime: 0 // Don't cache
  });
  
  // Fetch available services
  const { data: rawServices } = useQuery({
    queryKey: ['/api/services'],
    select: (data: ServiceData[]) => data
  });
  
  // Buscar servi√ßos em andamento que o montador est√° participando
  const { data: activeServices, isLoading: isLoadingActiveServices } = useQuery({
    queryKey: ['/api/services/active'],
    queryFn: async () => {
      const response = await fetch('/api/services/active');
      if (!response.ok) {
        throw new Error('Falha ao buscar servi√ßos ativos');
      }
      return response.json();
    }
    // Sempre buscar os servi√ßos ativos independente da aba selecionada
  });
  
  // Filter services by search term and selected city
  const filteredServices = services?.filter(service => {
    const matchesSearch = service.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (service.type && service.type.toLowerCase().includes(searchTerm.toLowerCase())) ||
      service.store.toLowerCase().includes(searchTerm.toLowerCase()) ||
      service.location.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCity = selectedCity === 'Todas as cidades' || 
      service.location.toLowerCase().includes(selectedCity.toLowerCase());
    
    return matchesSearch && matchesCity;
  }) || [];

  // Filtrar servi√ßos por status para cada aba
  const availableServices = filteredServices.filter(service => service.status === 'open');
  const inProgressServices = activeServices?.filter((service: any) => 
    service.status === 'in-progress'
  ) || [];
  const completedServicesFromRaw = rawServices?.filter(s => s.status === 'completed') || [];
  const completedServicesFromActive = activeServices?.filter((s: any) => s.status === 'completed') || [];
  
  // Debug logs para entender a categoriza√ß√£o
  console.log("[AssemblerDashboard] Servi√ßos dispon√≠veis:", availableServices.length);
  console.log("[AssemblerDashboard] Servi√ßos em andamento:", inProgressServices.length);
  console.log("[AssemblerDashboard] Servi√ßos finalizados (raw):", completedServicesFromRaw.length);
  console.log("[AssemblerDashboard] Servi√ßos finalizados (active):", completedServicesFromActive.length);
  console.log("[AssemblerDashboard] Total rawServices:", rawServices?.length || 0);
  console.log("[AssemblerDashboard] Total activeServices:", activeServices?.length || 0);
  
  // Debug detalhado dos servi√ßos por status
  console.log("[AssemblerDashboard] Servi√ßos dispon√≠veis detalhados:", availableServices.map(s => ({ id: s.id, title: s.title, status: s.status })));
  console.log("[AssemblerDashboard] Servi√ßos em andamento detalhados:", inProgressServices.map((s: any) => ({ id: s.id, title: s.title, status: s.status })));
  console.log("[AssemblerDashboard] Servi√ßos finalizados detalhados:", completedServicesFromActive.map((s: any) => ({ id: s.id, title: s.title, status: s.status })));
  
  // Calculate service counts by status
  const serviceCounts = {
    // Dispon√≠veis: apenas servi√ßos com status 'open' do rawServices
    available: availableServices.length,
    // Em andamento: apenas contar servi√ßos do activeServices com status 'in-progress'
    inProgress: inProgressServices.length,
    // Finalizados: apenas servi√ßos do activeServices com status 'completed'
    completed: completedServicesFromActive.length
  };
  
  // Handle applying for a service
  const applyMutation = useMutation({
    mutationFn: async (serviceId: number) => {
      try {
        console.log(`Enviando candidatura para servi√ßo ID: ${serviceId}`);
        const url = `/api/services/${serviceId}/apply`;
        const response = await apiRequest({
          method: "POST",
          url
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Falha ao enviar candidatura");
        }
        
        return await response.json();
      } catch (error) {
        console.error("Erro na candidatura:", error);
        throw error; // Propagando o erro para o onError
      }
    },
    onSuccess: (data) => {
      console.log("Candidatura enviada com sucesso:", data);
      
      // Extrair o ID do servi√ßo da resposta
      const serviceId = data.application?.serviceId;
      console.log(`Candidatura aceita para servi√ßo ID: ${serviceId}`);
      
      // Refresh services list
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
      queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
      
      // Atualizar o estado para abrir o chat automaticamente
      if (serviceId) {
        // Esperar um momento para a UI atualizar
        setTimeout(() => {
          // Definir o servi√ßo selecionado para o chat
          setSelectedChatService(serviceId);
          
          // Mudar para a se√ß√£o de chat
          setDashboardSection('chat');
          
          toast({
            title: "Candidatura enviada",
            description: "Chat aberto automaticamente para comunica√ß√£o com a loja",
            duration: 5000
          });
        }, 500);
      }
    },
    onError: (error: any) => {
      console.error("Erro completo ao candidatar-se:", error);
      // Sem toast aqui, pois j√° mostramos no componente
    }
  });
  
  const handleApply = async (serviceId: number) => {
    try {
      console.log(`AssemblerDashboard iniciando aplica√ß√£o para servi√ßo ${serviceId}`);
      return await applyMutation.mutateAsync(serviceId);
    } catch (error) {
      console.error(`AssemblerDashboard erro ao aplicar para servi√ßo ${serviceId}:`, error);
      throw error; // Propagando o erro para o componente AvailableServiceCard
    }
  };
  
  // Fun√ß√£o para lidar com o clique no bot√£o de avalia√ß√£o
  const handleRateClick = (service: any) => {
    setSelectedServiceForRating(service);
    setIsRatingDialogOpen(true);
    
    // Mostrar notifica√ß√£o sobre a avalia√ß√£o obrigat√≥ria
    toast({
      title: 'üåü Avalia√ß√£o Necess√°ria',
      description: '√â necess√°rio avaliar este servi√ßo antes de continuar usando o aplicativo.',
      duration: 8000,
      variant: 'destructive',
      className: 'bg-yellow-100 border-yellow-500 border-2 font-medium shadow-lg'
    });
  };

  // Renderiza diferentes se√ß√µes com base na aba selecionada
  const renderHomeSection = () => (
    <>
      <div className="bg-white rounded-xl shadow-md p-4 mb-4">
        <div className="flex flex-col mb-4">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold">
              Ol√°, <span className="text-primary">{user?.name || 'Montador'}</span>
            </h2>
            <button 
              className="text-primary text-sm font-medium"
              onClick={() => setIsProfileDialogOpen(true)}
            >
              Ver Perfil
            </button>
          </div>
          
          {/* Exibir avalia√ß√£o m√©dia do montador */}
          {user?.assembler && 'rating' in user.assembler && (
            <div className="flex items-center mt-1">
              <div className="flex items-center text-yellow-500">
                {[1, 2, 3, 4, 5].map((star) => (
                  <Star
                    key={star}
                    className={`h-4 w-4 ${
                      star <= (user.assembler?.rating || 0)
                        ? 'text-yellow-500 fill-yellow-500'
                        : 'text-gray-300'
                    }`}
                  />
                ))}
              </div>
              <span className="text-sm ml-2 text-gray-600">
                {user.assembler?.rating ? user.assembler.rating.toFixed(1) : '0.0'} Avalia√ß√£o m√©dia
              </span>
            </div>
          )}
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 lg:gap-4">
          <div 
            className={`rounded-lg p-3 text-center transition-all duration-300 cursor-pointer ${
              serviceCounts.available > 0 
                ? 'bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 shadow-sm hover:shadow-md hover:from-blue-100 hover:to-indigo-100' 
                : 'bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200'
            }`}
            onClick={() => serviceCounts.available > 0 && setDashboardSection('explore')}
          >
            <div className={`font-bold text-xl ${serviceCounts.available > 0 ? 'text-blue-700' : 'text-gray-500'}`}>
              üîµ {serviceCounts.available}
            </div>
            <div className="text-xs text-gray-600 font-medium">Dispon√≠veis</div>
          </div>
          <div 
            className={`rounded-lg p-3 text-center transition-all duration-300 cursor-pointer ${
              serviceCounts.inProgress > 0 
                ? 'bg-gradient-to-br from-amber-50 to-orange-50 border border-amber-200 shadow-sm hover:shadow-md hover:from-amber-100 hover:to-orange-100' 
                : 'bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200'
            }`}
            onClick={() => {
              if (serviceCounts.inProgress > 0) {
                setDashboardSection('home');
                setActiveTab('in-progress');
              }
            }}
          >
            <div className={`font-bold text-xl ${serviceCounts.inProgress > 0 ? 'text-amber-700' : 'text-gray-500'}`}>
              üü† {serviceCounts.inProgress}
            </div>
            <div className="text-xs text-gray-600 font-medium">Em Andamento</div>
          </div>
          <div 
            className={`rounded-lg p-3 text-center transition-all duration-300 cursor-pointer ${
              serviceCounts.completed > 0 
                ? 'bg-gradient-to-br from-emerald-50 to-green-50 border border-emerald-200 shadow-sm hover:shadow-md hover:from-emerald-100 hover:to-green-100' 
                : 'bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200'
            }`}
            onClick={() => {
              if (serviceCounts.completed > 0) {
                setDashboardSection('home');
                setActiveTab('completed');
              }
            }}
          >
            <div className={`font-bold text-xl ${serviceCounts.completed > 0 ? 'text-emerald-700' : 'text-gray-500'}`}>
              ‚úÖ {serviceCounts.completed}
            </div>
            <div className="text-xs text-gray-600 font-medium">Finalizados</div>
          </div>
        </div>
      </div>
      
      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'available' | 'in-progress' | 'completed')} className="mt-4">
        <TabsList className="grid w-full grid-cols-3 mb-4">
          <TabsTrigger value="available">Dispon√≠veis</TabsTrigger>
          <TabsTrigger value="in-progress">Em Andamento</TabsTrigger>
          <TabsTrigger value="completed">Finalizados</TabsTrigger>
        </TabsList>
        
        <TabsContent value="available">
          <div className="dashboard-card bg-white rounded-xl shadow-md mb-4">
            <div className="divide-y">
              {isLoading ? (
                // Show loading skeletons
                Array(2).fill(0).map((_, index) => (
                  <div key={index} className="p-4">
                    <Skeleton className="h-5 w-3/4 mb-2" />
                    <Skeleton className="h-4 w-1/2 mb-3" />
                    <Skeleton className="h-4 w-full mb-2" />
                    <Skeleton className="h-10 w-full rounded-full" />
                  </div>
                ))
              ) : error ? (
                // Show error message
                <div className="p-8 text-center text-red-500">
                  Erro ao carregar servi√ßos. Por favor, tente novamente.
                </div>
              ) : availableServices.length > 0 ? (
                // Show all available services
                availableServices.map(service => (
                  <AvailableServiceCard 
                    key={service.id} 
                    service={service} 
                    onApply={handleApply}
                    activeServices={activeServices || []}
                  />
                ))
              ) : (
                // Show empty state
                <div className="p-8 text-center text-gray-500">
                  Nenhum servi√ßo dispon√≠vel no momento.
                </div>
              )}
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="in-progress">
          <div className="dashboard-card bg-white rounded-xl shadow-md mb-4">
            <div className="divide-y">
              {isLoadingActiveServices ? (
                // Show loading skeletons
                Array(2).fill(0).map((_, index) => (
                  <div key={index} className="p-4">
                    <Skeleton className="h-5 w-3/4 mb-2" />
                    <Skeleton className="h-4 w-1/2 mb-3" />
                    <Skeleton className="h-4 w-full mb-2" />
                  </div>
                ))
              ) : !inProgressServices || inProgressServices.length === 0 ? (
                // Show empty state
                <div className="p-8 text-center text-gray-500">
                  <MessageSquare className="h-12 w-12 mx-auto text-gray-300 mb-3" />
                  <p>Nenhum servi√ßo em andamento.</p>
                </div>
              ) : (
                // Show only truly in-progress services (not completed ones)
                inProgressServices.filter((service: any) => service.status === 'in-progress').map((service: any) => (
                  <div 
                    key={service.id} 
                    className="p-4 hover:bg-gray-50 cursor-pointer"
                    onClick={() => setSelectedChatService(service.id)}
                  >
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium text-lg">{service.title}</h4>
                      <div className="flex items-center">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium mr-2"
                          style={{ 
                            backgroundColor: service.status === 'completed' ? '#dcfce7' : '#dbeafe',
                            color: service.status === 'completed' ? '#166534' : '#1e40af'
                          }}>
                          {service.status === 'completed' ? 'Finalizado' : 'Em Andamento'}
                        </span>
                        {service.hasNewMessages ? (
                          <div className="relative">
                            <MessageSquare className="h-5 w-5 text-primary" />
                            <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full animate-pulse">!</span>
                          </div>
                        ) : (
                          <MessageSquare className="h-5 w-5 text-primary" />
                        )}
                      </div>
                    </div>
                    <div className="text-sm text-gray-500 mb-2">
                      <p>Loja: {service.store?.name || 'N√£o especificada'}</p>
                      <p>Local: {service.location || 'N√£o especificado'}</p>
                      <p>Data: {service.date ? new Date(service.date).toLocaleDateString('pt-BR') : 'N√£o especificada'}</p>
                    </div>
                    <div className="flex justify-between items-center mt-3">
                      <div className="text-primary font-semibold">
                        {service.price ? `R$ ${parseFloat(service.price).toFixed(2).replace('.', ',')}` : 'Pre√ßo n√£o especificado'}
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={(e: React.MouseEvent) => {
                          e.stopPropagation();
                          setSelectedChatService(service.id);
                          setDashboardSection('chat');
                        }}
                      >
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Ver Chat
                      </Button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="completed">
          <div className="dashboard-card bg-white rounded-xl shadow-md mb-4">
            <div className="divide-y">
              {isLoading || isLoadingActiveServices ? (
                // Show loading skeletons
                Array(2).fill(0).map((_, index) => (
                  <div key={index} className="p-4">
                    <Skeleton className="h-5 w-3/4 mb-2" />
                    <Skeleton className="h-4 w-1/2 mb-3" />
                    <Skeleton className="h-4 w-full mb-2" />
                  </div>
                ))
              ) : error ? (
                // Show error message
                <div className="p-8 text-center text-red-500">
                  Erro ao carregar servi√ßos. Por favor, tente novamente.
                </div>
              ) : (completedServicesFromRaw.length > 0 || completedServicesFromActive.length > 0) ? (
                // Show completed services from both sources
                <>
                  {/* Show completed services from rawServices */}
                  {completedServicesFromRaw.map(service => (
                    <CompletedServiceCard 
                      key={`raw-${service.id}`} 
                      service={{
                        id: service.id,
                        title: service.title,
                        location: service.location || '',
                        date: new Date(service.date).toLocaleDateString('pt-BR'),
                        price: `R$ ${parseFloat(service.price).toFixed(2).replace('.', ',')}`,
                        store: service.store || 'Loja n√£o especificada',
                        type: service.materialType || service.type || 'N√£o especificado',
                        completedAt: service.completedAt ? new Date(service.completedAt).toLocaleDateString('pt-BR') : undefined,
                        rated: false // Ser√° atualizado pelo backend
                      }}
                      onRateClick={handleRateClick}
                      onChatClick={(serviceId) => setSelectedChatService(serviceId)}
                    />
                  ))}
                  
                  {/* Show completed chat services */}
                  {completedServicesFromActive.map((service: any) => (
                    <CompletedServiceCard 
                      key={`chat-${service.id}`}
                      service={{
                        id: service.id,
                        title: service.title,
                        location: service.location || '',
                        date: service.date ? new Date(service.date).toLocaleDateString('pt-BR') : 'Data n√£o especificada',
                        price: service.price ? `R$ ${parseFloat(service.price).toFixed(2).replace('.', ',')}` : '',
                        store: service.store || 'Loja n√£o especificada',
                        type: service.materialType || 'N√£o especificado',
                        completedAt: service.completedAt ? new Date(service.completedAt).toLocaleDateString('pt-BR') : undefined,
                        rated: !!service.rated
                      }}
                      onRateClick={handleRateClick}
                      onChatClick={(serviceId) => setSelectedChatService(serviceId)}
                    />
                  ))}
                  
                  {/* Se√ß√£o de conversas finalizadas */}
                  {completedServicesFromActive.filter((service: any) => service.applicationStatus).length > 0 && (
                    <div className="p-4 border-t bg-gray-50">
                      <h4 className="text-md font-medium mb-3 text-gray-700">Ver Conversas Finalizadas</h4>
                      <div className="space-y-3">
                        {completedServicesFromActive.filter((service: any) => service.applicationStatus).map((service: any) => (
                          <div 
                            key={`completed-chat-${service.id}`} 
                            className="bg-white rounded-lg shadow-sm p-3 hover:bg-gray-100 cursor-pointer transition-colors border border-gray-200"
                            onClick={() => setSelectedChatService(service.id)}
                          >
                            <div className="flex justify-between items-center">
                              <div className="flex-1">
                                <div className="flex items-center">
                                  <h4 className="font-medium text-gray-800">{service.title}</h4>
                                  <span className="ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    Finalizado
                                  </span>
                                </div>
                                <p className="text-sm text-gray-500 mt-1">
                                  Loja: {service.store?.name || 'N√£o especificada'}
                                </p>
                              </div>
                              <MessageSquare className="h-5 w-5 text-gray-400" />
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </>
              ) : (
                // Show empty state
                <div className="p-8 text-center text-gray-500">
                  <CheckCheck className="h-12 w-12 mx-auto text-gray-300 mb-3" />
                  <p>Nenhum servi√ßo conclu√≠do ainda.</p>
                </div>
              )}
            </div>
          </div>
        </TabsContent>
      </Tabs>
      
      <h3 className="text-lg font-semibold mb-4">Pr√≥ximos Servi√ßos</h3>
      
      <div className="bg-white rounded-lg p-4">
        <p className="text-gray-500 text-center">
          Visualiza√ß√£o de pr√≥ximos servi√ßos dispon√≠vel na aba "In√≠cio"
        </p>
      </div>
    </>
  );

  const renderExploreSection = () => (
    <>
      <div className="dashboard-card bg-white rounded-xl shadow-md mb-4 mt-2">
        <div className="p-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h3 className="font-medium">Servi√ßos Pr√≥ximos</h3>
            <Popover open={isCityDropdownOpen} onOpenChange={setIsCityDropdownOpen}>
              <PopoverTrigger asChild>
                <button className="text-sm text-primary flex items-center hover:bg-blue-50 px-2 py-1 rounded transition-colors">
                  <MapPin className="h-4 w-4 mr-1" />
                  <span className="max-w-[120px] truncate">{selectedCity}</span>
                  <ChevronDown className="h-4 w-4 ml-1" />
                </button>
              </PopoverTrigger>
              <PopoverContent className="w-80 p-0" align="end">
                <div className="max-h-64 overflow-y-auto">
                  <div className="p-2 border-b">
                    <p className="text-sm font-medium text-gray-700">Filtrar por cidade</p>
                  </div>
                  <div className="py-2">
                    {brazilianCities.map((city) => (
                      <button
                        key={city}
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-gray-100 transition-colors ${
                          selectedCity === city ? 'bg-blue-50 text-blue-600 font-medium' : 'text-gray-700'
                        }`}
                        onClick={() => {
                          setSelectedCity(city);
                          setIsCityDropdownOpen(false);
                        }}
                      >
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-2 text-gray-400" />
                          {city}
                          {selectedCity === city && (
                            <CheckCheck className="h-4 w-4 ml-auto text-blue-600" />
                          )}
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>
          <div className="mt-2 relative">
            <div className="relative">
              <Input
                placeholder="Pesquisar servi√ßos"
                className="w-full pl-10 pr-12 py-2 rounded-full"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                <Search className="h-4 w-4" />
              </div>
            </div>
            <div className="absolute top-0 right-0">
              <button className="bg-gray-100 p-2 rounded-full">
                <SlidersHorizontal className="h-4 w-4 text-gray-600" />
              </button>
            </div>
          </div>
        </div>
        
        <div className="divide-y">
          {isLoading ? (
            // Show loading skeletons
            Array(3).fill(0).map((_, index) => (
              <div key={index} className="p-4">
                <Skeleton className="h-5 w-3/4 mb-2" />
                <Skeleton className="h-4 w-1/2 mb-3" />
                <Skeleton className="h-4 w-full mb-2" />
                <Skeleton className="h-10 w-full rounded-full" />
              </div>
            ))
          ) : error ? (
            // Show error message
            <div className="p-8 text-center text-red-500">
              Erro ao carregar servi√ßos. Por favor, tente novamente.
            </div>
          ) : filteredServices.length > 0 ? (
            // Show services
            filteredServices.map(service => (
              <AvailableServiceCard 
                key={service.id} 
                service={service} 
                onApply={handleApply}
                activeServices={activeServices || []}
              />
            ))
          ) : (
            // Show empty state
            <div className="p-8 text-center text-gray-500">
              Nenhum servi√ßo dispon√≠vel no momento.
            </div>
          )}
        </div>
      </div>
    </>
  );

  // Buscar servi√ßos em andamento que o montador est√° participando
  
  // Estado para controlar qual servi√ßo est√° selecionado para chat
  const [selectedChatService, setSelectedChatService] = useState<number | null>(null);
  
  // Buscar o perfil completo do montador para obter o ID
  const { data: profileData } = useQuery({
    queryKey: ['/api/profile'],
    queryFn: async () => {
      if (!user || user.userType !== 'montador') return null;
      const response = await fetch('/api/profile');
      if (!response.ok) {
        throw new Error('Falha ao buscar perfil do montador');
      }
      const data = await response.json();
      console.log("Perfil do montador carregado:", data);
      return data;
    },
    enabled: !!user && user.userType === 'montador'
  });
  
  const renderChatSection = () => {
    // Se estiver selecionado um chat espec√≠fico, exibir a interface de chat
    if (selectedChatService !== null) {
      return (
        <ChatInterface 
          serviceId={selectedChatService} 
          onBack={() => setSelectedChatService(null)} 
        />
      );
    }
    
    // Mostrar servi√ßos onde o montador tem conversas ativas (apenas servi√ßos n√£o finalizados)
    // Incluir servi√ßos onde h√° candidatura (qualquer status) ou se est√° em andamento, mas N√ÉO os completos
    const activeChats = activeServices ? activeServices.filter((service: any) => {
      // Mostrar se tem candidatura ou est√° em andamento, mas excluir os completos
      return (service.applicationStatus || service.status === 'in-progress') && 
             service.status !== 'completed';
    }) : [];
    
    // Conversas finalizadas (apenas servi√ßos completos)
    const completedChats = activeServices ? activeServices.filter((service: any) => {
      return service.status === 'completed' && service.applicationStatus;
    }) : [];
    
    console.log('[AssemblerDashboard] Servi√ßos dispon√≠veis para chat:', activeChats);
    
    return (
      <div className="mt-2">
        <h3 className="text-lg font-semibold mb-4">Conversas</h3>
        
        {isLoadingActiveServices ? (
          <div className="space-y-3">
            {[1, 2, 3].map(i => (
              <div key={i} className="bg-white rounded-xl shadow-md p-4">
                <Skeleton className="h-6 w-3/4 mb-2" />
                <Skeleton className="h-4 w-1/2" />
              </div>
            ))}
          </div>
        ) : (activeChats.length === 0) ? (
          <div className="bg-white rounded-xl shadow-md p-6 text-center">
            <MessageSquare className="h-16 w-16 mx-auto text-gray-300 mb-4" />
            <h4 className="text-lg font-medium mb-2">Nenhuma conversa dispon√≠vel</h4>
            <p className="text-gray-500 mb-4">Quando voc√™ tiver mensagens de lojas ou clientes, elas aparecer√£o aqui.</p>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Se√ß√£o de conversas ativas */}
            {activeChats.length > 0 && (
              <div>
                <h4 className="text-md font-medium mb-3">Conversas Ativas</h4>
                <div className="space-y-3">
                  {activeChats.map((service: any) => (
                    <div 
                      key={service.id} 
                      className={`bg-white rounded-xl shadow-md p-4 hover:bg-gray-50 cursor-pointer ${service.hasUnreadMessages ? 'border-l-4 border-primary' : ''}`}
                      onClick={() => setSelectedChatService(service.id)}
                    >
                      <div className="flex justify-between items-center">
                        <div>
                          <div className="flex items-center">
                            <h4 className="font-medium">{service.title}</h4>
                            {service.hasUnreadMessages && (
                              <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary text-white animate-pulse">
                                Nova mensagem
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-500">
                            Loja: {service.store?.name || 'N√£o especificada'}
                          </p>
                        </div>
                        <MessageSquare className={`h-5 w-5 ${service.hasUnreadMessages ? 'text-primary' : 'text-gray-400'}`} />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Removido a se√ß√£o de conversas finalizadas - movidas para a aba "Finalizados" */}
          </div>
        )}
      </div>
    );
  };



  // Reagir a novas mensagens recebidas via WebSocket
  useEffect(() => {
    if (lastMessage && lastMessage.type === 'new_message') {
      console.log("[AssemblerDashboard] Nova mensagem recebida via WebSocket", lastMessage);
      console.log("[AssemblerDashboard] ID do montador do perfil:", user?.assembler?.id);
      
      // Atualizar as listas relevantes para refletir nova mensagem
      queryClient.invalidateQueries({ queryKey: ['/api/services'] });
      queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
      
      // Invalidar a lista de mensagens espec√≠fica se houver serviceId
      if (lastMessage.serviceId) {
        queryClient.invalidateQueries({ 
          queryKey: [`/api/services/${lastMessage.serviceId}/messages`] 
        });
        
        // Definir o servi√ßo selecionado para o chat
        setSelectedChatService(lastMessage.serviceId);
        
        // Mudar para a se√ß√£o de chat
        setDashboardSection('chat');
        
        // Exibir notifica√ß√£o sonora ou visual para o usu√°rio
        toast({
          title: "Nova mensagem recebida",
          description: "Chat aberto automaticamente",
          duration: 5000
        });
      } else if (dashboardSection !== 'chat') {
        toast({
          title: "Novo chat dispon√≠vel",
          description: "Clique na aba Chat para visualizar a conversa",
          duration: 5000
        });
      }
    }
  }, [lastMessage, dashboardSection, queryClient, toast]);
  
  // Renderiza a se√ß√£o apropriada com base na aba selecionada
  const renderDashboardContent = () => {
    // Log para diagnosticar se estamos obtendo o ID do montador corretamente
    console.log("Renderizando dashboard com perfil:", user);
    
    // Se estivermos na se√ß√£o de chat E houver um servi√ßo selecionado, mostrar a interface de chat
    if (dashboardSection === 'chat' && selectedChatService !== null) {
      const assemblerId = user?.assembler?.id;
      console.log(`Abrindo chat para servi√ßo ${selectedChatService} com montador ID: ${assemblerId}`);
      
      return (
        <ChatInterface 
          serviceId={selectedChatService}
          assemblerId={assemblerId} // Passa ID do montador atual obtido do perfil
          onBack={() => setSelectedChatService(null)} 
        />
      );
    }
    
    // Se um tab de navega√ß√£o foi selecionado, mas ainda estamos com um chat aberto, fechar o chat
    if (selectedChatService !== null && dashboardSection !== 'chat') {
      setSelectedChatService(null);
    }
    
    // Mostrar a se√ß√£o correspondente √† aba selecionada
    switch(dashboardSection) {
      case 'home':
        return renderHomeSection();
      case 'explore':
        return renderExploreSection();
      case 'chat':
        return renderChatSection();
      default:
        return renderHomeSection();
    }
  };

  return (
    <div className="p-4">
      {renderDashboardContent()}
      
      {/* Di√°logo de Avalia√ß√£o */}
      {selectedServiceForRating && (
        <RatingDialog
          open={isRatingDialogOpen}
          onOpenChange={setIsRatingDialogOpen}
          serviceId={selectedServiceForRating.id}
          toUserId={selectedServiceForRating.store?.userId || 0}
          toUserName={selectedServiceForRating.store?.name || 'Loja'}
          serviceName={selectedServiceForRating.title}
          onSuccess={() => {
            // Atualizar listas de servi√ßos ap√≥s avalia√ß√£o
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            // Notificar usu√°rio sobre avalia√ß√£o
            toast({
              title: 'Avalia√ß√£o enviada com sucesso',
              description: 'Obrigado por avaliar este servi√ßo!'
            });
          }}
        />
      )}
      
      {/* Di√°logo de Confirma√ß√£o de Servi√ßo (NOVO) */}
      {selectedServiceForConfirm && (
        <ServiceConfirmDialog
          open={isConfirmDialogOpen}
          onClose={() => setIsConfirmDialogOpen(false)}
          serviceId={selectedServiceForConfirm.id}
          serviceTitle={selectedServiceForConfirm.title}
          onConfirmed={() => {
            // Ap√≥s confirma√ß√£o, limpar os dados e atualizar listas
            queryClient.invalidateQueries({ queryKey: ['/api/services'] });
            queryClient.invalidateQueries({ queryKey: ['/api/services/active'] });
            
            // Aguardar um momento antes de abrir o di√°logo de pagamento
            // Na pr√°tica, ser√° aberto quando receber a notifica√ß√£o payment_ready
            setTimeout(() => {
              // Configurar dados para pagamento
              setSelectedServiceForPayment({
                id: selectedServiceForConfirm.id,
                title: selectedServiceForConfirm.title,
                amount: selectedServiceForConfirm.price
              });
              
              // Abrir di√°logo de pagamento automaticamente
              setIsPaymentDialogOpen(true);
            }, 500);
            
            // Limpar dados da confirma√ß√£o
            setSelectedServiceForConfirm(null);
          }}
        />
      )}
      
      {/* Di√°logo de Pagamento (NOVO) */}
      {selectedServiceForPayment && (
        <PaymentDialog
          open={isPaymentDialogOpen}
          onClose={() => {
            setIsPaymentDialogOpen(false);
            setSelectedServiceForPayment(null);
          }}
          serviceId={selectedServiceForPayment.id}
          amount={selectedServiceForPayment.amount}
        />
      )}
      
      {/* Di√°logo de Perfil */}
      <ProfileDialog
        open={isProfileDialogOpen}
        onOpenChange={setIsProfileDialogOpen}
        onLogout={onLogout}
      />
    </div>
  );
};

export default AssemblerDashboard;
