# Validador de Conta Bancária – Especificação

## Objetivo

Garantir que, no fluxo de criação de conta do aplicativo **Amigo Montador**, todos os dados bancários e a chave PIX fornecidos pelo usuário sejam válidos antes de persistir no backend.

## Campos e Regras de Validação

| Campo                          | Obrigatório | Regra                                         | Regex sugerida           | Observações                                                 |
| ------------------------------ | ----------- | --------------------------------------------- | ------------------------ | ----------------------------------------------------------- |
| Agência                        | Sim         | Somente números, 4 dígitos                    | `^\d{4}$`                | Adaptar se o banco aceitar dígito verificador (ex.: 1234-5) |
| Número da Conta                | Sim         | 5–12 dígitos + opcional DV                    | `^\d{5,12}(-\d{1})?$`    | Se houver DV separar por hífen                              |
| Nome do Titular                | Sim         | ≥ 3 caracteres, apenas letras/acentos/espaços | `^[\p{L} ]{3,}$`         | Normalizar espaços duplicados                               |
| Número do Documento (CPF/CNPJ) | Sim         | CPF (11 dígitos) ou CNPJ (14 dígitos) válidos | `^\d{11}$` ou `^\d{14}$` | Implementar algoritmo de dígito verificador                 |
| Tipo de Chave PIX              | Sim         | Enum: `cpf_cnpj`, `email`, `telefone`, `uuid` | —                        | Definir como `select`                                       |
| Valor da Chave PIX             | Sim         | Validação condicional (ver abaixo)            | Varia                    | —                                                           |

### Validação da Chave PIX

| Tipo selecionado | Regras                                    | Regex / algoritmo                                             |
| ---------------- | ----------------------------------------- | ------------------------------------------------------------- |
| CPF/CNPJ         | Mesmo algoritmo do campo Documento        | Idem acima                                                    |
| E‑mail           | Estrutura RFC 5322 simplificada           | `^[^\s@]+@[^\s@]+\.[^\s@]+$`                                  |
| Telefone         | DDD (2 dígitos) + número (8 ou 9 dígitos) | `^\d{2}\d{8,9}$` <br> (aceitar prefixo `+55` opcional)        |
| Chave aleatória  | UUID v4                                   | `^[\da-f]{8}(-[\da-f]{4}){3}-[\da-f]{12}$` (case‑insensitive) |

## Mensagens de Erro

Use mensagens curtas, afirmativas e específicas do campo:

| Campo              | Mensagem sugerida                             |
| ------------------ | --------------------------------------------- |
| Agência            | `Número de agência inválido (use 4 dígitos).` |
| Número da Conta    | `Número de conta inválido.`                   |
| Nome do Titular    | `Informe o nome completo do titular.`         |
| Documento          | `CPF/CNPJ inválido.`                          |
| Tipo de Chave PIX  | `Selecione o tipo de chave PIX.`              |
| Valor da Chave PIX | `Chave PIX inválida para o tipo selecionado.` |

Recomenda-se exibir o erro logo abaixo do respectivo campo e bloquear o envio do formulário até que todos os campos estejam válidos.

## Fluxo de Validação (Front‑end)

1. No `onBlur` de cada campo, rodar a regra específica.
2. Ao `submit`, validar novamente todos os campos.
3. Se houver erro, impedir envio e focar no primeiro campo com problema.

## Validação Backend

Repetir a validação (defesa em profundidade). Retornar 422 com objeto JSON:

```json
{
  "field": "agency",
  "message": "Número de agência inválido (use 4 dígitos)."
}
```

## Critérios de Aceite

* Formulário impede envio quando qualquer campo estiver inválido.
* Mensagens de erro seguem exatamente o conteúdo especificado.
* Todos os tipos de chave PIX são testados (unit tests + testes de interface).
* Código segue clean code e possui testes automatizados.
